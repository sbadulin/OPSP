// ConsoleApplication2.cpp: определяет точку входа для консольного приложения.
//

#include "stdafx.h"
#include <stdlib.h>
//#include <stdio.h>
#include <string.h>
//#include <iostream>
//using namespace std;

int testWord(char line[]);
char delimeters[] = { ' ', '\0', '\n' }; //Список символов - разделителей задаем массивом delimeters
char word[128]; // Хранение символов в слове

int isDelimeter(char ch) {
	/* Проверяем, является ли заданный символ разделителем
	Если да, возвращаем 1, если нет - 0  */

	int i; //Объявляем переменную счетчика
	for (i = 0; i < sizeof(delimeters); i++) { // Просматриваем все элементы массива
		if (ch == delimeters[i]) { // Если заданный символ совпадаем с элементом массива
			return 1; // Возвращаем 1
		} //if
	} //for
	return 0; // Если не вернули 1, то возвращаем 0
}

int fromConsole(char line[]) {
	// Заполняем массив вводимыми в консоли символами и выводим длину введенной строки

	char ch; // Инициализируем переменную для хранения введенного символа
	int i = 0; // Инициализируем счетчик
	scanf("%c", &ch); // Считываем первый введенный символ
	while ((ch != '\n') && (i < 127)) {
		// Заполняем массив введенными символами, пока не появится перенос строки или массив не переполнится

		line[i] = ch; // Присваиваем текущему элементу массива введенный символ
		i++; // Инкрементируем счетчик
		scanf("%c", &ch); // Считывам следующий символ
	}
	line[i] = 0; // Присваиваем последнему элементу массива символ окончания строки
	return i; // Возвращаем длину введенной строки (совпадает с счетчиком)
}

int countWords(char arr[]) {
	// Считаем слова и выводим их в консоль

	int i = 0; // Счетчик для прохода массива
	int q = 0; // Исходное состояние автомата
	int ret = 0; //Число слов в строке
	int wc = 0; // Счетчик для позиции в массиве word

				// Описываем состояния конечного автомата: q0 - начальное, q1 - найден символ разделитель, q2 - найден значимый символ

	while (arr[i] != 0) { // Проходим массив, пока не встретим символ конца строки (последний элемент)
		if (q == 0) { // Если находимся в исходном состоянии автомата
			if (isDelimeter(arr[i])) { // Если символ является разделителем
				q = 1; // Переходим в состояние 1
				i++; // Инкр. счетчик
				continue; // Переходим к следующему шагу цикла
			}
			word[wc] = arr[i]; // добавляем к слову текущий символ из массива
			wc++; // Увеличиваем счетчик

			q = 2; // Переходим в сост. 2
			i++; // Инкр. счетчик
			continue; // Переходим к следующему шагу цикла
		}
		if (q == 1) { //Если находимся в состоянии автомата 1
			if (isDelimeter(arr[i])) { // Если проверяемый символ - разделитель
				i++; // Инкр. счетчик
				continue; // Переходим к следующему шагу цикла
			}
			word[wc] = arr[i]; // добавляем к слову текущий символ из массива
			wc++; // Увеличиваем счетчик
			q = 2; // Переходим в сост. 2
			i++; // Инкр. счетчик
			continue; // Переходим к следующему шагу цикла
		}
		if (q == 2) { //Если находимся в состоянии автомата 1
			if (isDelimeter(arr[i])) { // Если проверяемый символ - разделитель

									   // Прекращаем добавлять символы в слово и выводим его
				word[wc] = 0; // добавляем символ конца строки
				printf("%s\n", word); // выводим слово
				testWord(word);
				wc = 0; // Обнуляем счетчик обхода слова

				ret++; // Увеличиваем счетчик слов
				q = 1; // Переходим в состояние 1
				i++; // Инкр. счетчик
				continue; // Переходим к следующему шагу цикла
			}
			word[wc] = arr[i]; // добавляем к слову текущий символ из массива
			wc++; // Увеличиваем счетчик
			i++; // Инкр. счетчик
			continue; // Переходим к следующему шагу цикла
		}

	}
	if (q == 2) { //Если по окончанию цикла находимся в состоянии 2
		word[wc] = 0; // добавляем символ конца строки
		printf("%s\n", word); // выводим слово
		testWord(word);
		wc = 0; // Обнуляем счетчик обхода слова
		ret++; // Увеличиваем счетчик слов
	}
	return ret; // Возвращаем значение счетчика слов
}

int testWord(char line[]) { // При нахождении слова shutdown зыкрываем консоль
	if (strcmp(line, "shutdown") == 0) { //сравнивем поданую и заданную
		exit(0); // Выход с кодом 0

	}
	return 0;
}


// ---Задание 4---

	/* Чтение заданной строки из файла */

int readFromFile(FILE* file, char line[], int number) {
	int i = 0;
	/* Возвращает количество символов в строке number - номер строки, нумеруется от нуля
	в line[] складываем строку */
	// считываем символы в массив

	if (file != NULL) { // отлавливаем проблемы с файлом
		char ret;
		fscanf(file, "%c", &ret);
		// сначала убираем из потока ввода лишние строки
		while (!feof(file) && number > 0) {
			printf("%c", ret);
			if (ret == '\n') {
				printf("EOL found\n");
				number--;
			}
			fscanf(file, "%c", &ret);
		}

		// если число строк осталось больше нуля, значит в файле их меньше
		if (number>0) {
			line[i] = 0;
			return 0;
		}

		// начинаем записывать искомую строку в массив, пока не встретим конец строки
		while (ret != '\n') {
			//printf("In loop");
			line[i] = ret;
			i++;
			fscanf(file, "%c", &ret);
			//printf("%c", line);
		}
		// длина массива равна числу проходов через ^^^ цикл
		printf("Line length: %d\n", i);
	}
	else {
		printf("file troubles\n");
	}

	return i; // возвращаем искомое значение
}

// ---Задание 5---

	/* Возвращаем int - число слов в файле. */

int сountFileWords(FILE* file) {
	int arrPos = 0;
	char fileContent[1024];
	int numberOfWords = 0;
	if (file != NULL) { // отлавливаем проблемы с файлом
		// записываем все символы из файла в буфер
		char ret;
		fscanf(file, "%c", &ret);
		while (!feof(file)) {
			fileContent[arrPos] = ret;
			arrPos++;
			fscanf(file, "%c", &ret);
		}
	}
	else { // если есть проблемы с файлом, то выбрасываем предупреждение
		printf("file troubles\n");
	}
	
	// считаем количество слов в ней, увеличивам счетчик
	return countWords(fileContent);
}



// ---Задание 6---

	/* Выводим в консоль содержимое файла */

int toConsole(FILE* file) {

	int arrPos = 0;
	char fileContent[1024];
	int numberOfWords = 0;
	if (file != NULL) { // отлавливаем проблемы с файлом
		// записываем все символы из файла в буфер
		char ret;
		fscanf(file, "%c", &ret);
		while (!feof(file)) {
			fileContent[arrPos] = ret;
			arrPos++;
			fscanf(file, "%c", &ret);
		
		}
		printf(fileContent);
		printf("\n");
	}
	else { // если есть проблемы с файлом, то выбрасываем предупреждение
		printf("file error\n");
	}

	return 0;
}



int main(int argc, char* argv[])
{
	char line[128]; // инициализируем буфер для считываемых из файла символов

	// Задание 1 - Проверяем, является ли заданный символ разделителем

			//char ch = 'y'; // Задаем проверяемый символ
			//printf("%i\n", isDelimeter(ch)); // Выводим в консоль результат выполнения функции isDelimeter

	// Задание 2

			//printf("%i\n", fromConsole(line)); // Выводим длину введенной строки
			//printf("%s\n", line); // Выводим полученный массив как строку (для проверки)

	// Задание 3

		 //fromConsole(line); // заполняем массив
		 //printf("%i\n", countWords(line)); //Выводим число слов

	FILE* sFile; // присваиваем логическое имя файлу
	sFile = fopen("C:/temp.txt", "r"); // открываем файла с данными в режиме чтения

	// Задание 4

		//readFromFile(sFile, line, 1);	

	// Задание 5 - Считаем слова в файле

		сountFileWords(sFile);

	// Задание 6 - Выводим в консоль содержимое файла

		//toConsole(sFile);


	system("pause"); // Ждем ввода символа с клавиатуры

	return 0;
}

